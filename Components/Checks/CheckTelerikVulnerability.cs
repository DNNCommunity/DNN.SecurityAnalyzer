using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using DotNetNuke.Common;
using DotNetNuke.Common.Utilities;
using DotNetNuke.Security;
using Assembly = System.Reflection.Assembly;

namespace DNN.Modules.SecurityAnalyzer.Components.Checks
{
    public class CheckTelerikVulnerability : IAuditCheck
    {
        public string Id => "CheckTelerikVulnerability";

        private string[] _configKeys = {
            "Telerik.AsyncUpload.ConfigurationEncryptionKey",
            "Telerik.Upload.ConfigurationHashKey",
            "Telerik.Web.UI.DialogParametersEncryptionKey",
        };

        private const string DefaultValue = "MDEyMzQ1Njc4OUFCQ0RFRjAxMjM0NTY3ODlBQkNERUYwMTIzNDU2Nzg5QUJDREVG";
        private Func<string, bool> _funx = s => string.IsNullOrEmpty(s) || DefaultValue.Equals(s) || s.Length < 40;

        public CheckResult Execute()
        {
            var result = new CheckResult(SeverityEnum.Unverified, Id);

            var fileSums = new List<string>
            {
                // SHA-256 hashes
                "63de0ee563f34c21b0688fb5f81be02bb2aee94c8e5c855fbece72e4de455945", //Telerik 2013.2.717.40
                "f6dc6dd32f4f5698217c72a512ce9872c002be98cfced9a0344b46c50c1a6f02"  //Telerik 2013.2.717.35
            };

            var compareVersion = new Version(2017, 2, 711);
            var filePath = Path.Combine(Globals.ApplicationMapPath, "bin\\Telerik.Web.UI.dll");
            result.Severity = SeverityEnum.Pass;

            if (File.Exists(filePath))
            {
                var assemblyVersion = Assembly.LoadFile(filePath).GetName().Version;
                if (assemblyVersion < compareVersion && !fileSums.Contains(Utility.GetFileCheckSum(filePath)))
                {
                    result.Severity = SeverityEnum.Failure;
                    result.Notes.Add("Telerik.Web.UI.dll assembly has't been patched.");
                }

                if (_configKeys.Select(Config.GetSetting).Any(val => _funx(val)))
                {
                    var err = UpdateWebConfigFile();
                    if (!string.IsNullOrEmpty(err))
                    {
                        result.Notes.Add("Couldn't update web.config file!");
                    }
                }

                // check after trying to add the missing key(s)
                foreach (var configKey in _configKeys)
                {
                    if (string.IsNullOrEmpty(Config.GetSetting(configKey)))
                    {
                        result.Severity = SeverityEnum.Failure;
                        result.Notes.Add("App Setting \"" + configKey + "\" doesn't exist in web.config.");
                    }
                }
            }
            else
            {
                result.Notes.Add("Telerik component is not installed in this site.");
            }

            return result;
        }

        private string UpdateWebConfigFile()
        {
            var configChanged = false;
            var strError = "";
            try
            {
                //open the web.config
                var xmlConfig = Config.Load();

                foreach (var configKey in _configKeys)
                {
                    var currentKey = Config.GetSetting(configKey);
                    if (_funx(currentKey))
                    {
                        configChanged = true;
                        //create a random Telerik encryption key and add it under <appSettings>
                        var newKey = new PortalSecurity().CreateKey(32);
                        newKey = Convert.ToBase64String(Encoding.ASCII.GetBytes(newKey));
                        Config.AddAppSetting(xmlConfig, configKey, newKey);
                    }
                }

                if (configChanged)
                {
                    //save a copy of the exitsing web.config
                    var backupFolder = string.Concat(Globals.glbConfigFolder, "Backup_", DateTime.Now.ToString("yyyyMMddHHmm"), "\\");
                    strError += Config.Save(xmlConfig, backupFolder + "web_.config") + Environment.NewLine;

                    //save the web.config
                    strError += Config.Save(xmlConfig) + Environment.NewLine;
                }
            }
            catch (Exception ex)
            {
                strError += ex.Message;
            }
            return strError;
        }
    }
}